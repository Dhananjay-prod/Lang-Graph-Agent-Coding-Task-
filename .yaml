agent:
  name: "Langie"
  type: "customer_support"
  model: "gemini-1.5-flash"
  personality: |
    You are Langie â€” a structured and logical Lang Graph Agent.
    - You think in stages: each node represents a clear phase of the workflow.
    - You carefully carry forward state variables from one stage to the next.
    - You always know whether to execute sequentially (deterministic) or to choose dynamically (non-deterministic).
    - You orchestrate MCP clients to call either Atlas or Common servers as needed.
    - You log every decision clearly and output a final structured payload.

# Input Schema Definition
input_schema:
  type: "object"
  required:
    - customer_name
    - query
    - ticket_id
  properties:
    customer_name:
      type: "string"
      description: "Customer's full name"
    email:
      type: "string"
      format: "email" 
      description: "Customer's email address (optional, will be requested if missing)"
    query:
      type: "string"
      description: "Customer's support query"
    priority:
      type: "string"
      enum: ["low", "medium", "high", "urgent"]
      default: "medium"
    ticket_id:
      type: "string"
      pattern: "^T[0-9]+$"
      description: "Unique ticket identifier"

# MCP Server Simulation
mcp_servers:
  COMMON:
    description: "Simulated AI processing server - Gemini integration"
    type: "simulation"
    capabilities:
      - parse_request_text
      - normalize_fields
      - add_flags_calculations
      - solution_evaluation
      - response_generation
  
  ATLAS:
    description: "Simulated external systems server - database and API simulation"
    type: "simulation"
    capabilities:
      - extract_entities
      - enrich_records
      - clarify_question
      - extract_answer
      - knowledge_base_search
      - escalation_decision
      - update_ticket
      - close_ticket
      - execute_api_calls
      - trigger_notifications

# Workflow Stage Definitions
stages:
  - stage_number: 1
    name: "INTAKE"
    mode: "deterministic"
    description: "Accept and validate initial payload"
    ai_integration: false
    abilities:
      - accept_payload
    implementation: "Basic validation and state initialization"
    
  - stage_number: 2
    name: "UNDERSTAND"
    mode: "deterministic"
    description: "Parse request and extract entities"
    ai_integration: true
    ai_calls: 1
    abilities:
      - parse_request_text (COMMON - Gemini AI)
      - extract_entities (ATLAS - Regex)
    implementation: "AI-powered query analysis with entity extraction"
    
  - stage_number: 3
    name: "PREPARE"
    mode: "deterministic"
    description: "Normalize and enrich data"
    ai_integration: false
    abilities:
      - normalize_fields (COMMON)
      - enrich_records (ATLAS)
      - add_flags_calculations (COMMON)
    implementation: "Data processing and customer record enrichment"
    
  - stage_number: 4
    name: "ASK"
    mode: "human_interaction"
    description: "Request clarification if needed"
    ai_integration: false
    abilities:
      - clarify_question (ATLAS)
    implementation: "Simulated clarification request (no real human interaction)"
    note: "Currently simulates human interaction for demo purposes"
    
  - stage_number: 5
    name: "WAIT"
    mode: "deterministic"
    description: "Process customer response"
    ai_integration: false
    abilities:
      - extract_answer (ATLAS)
    implementation: "Simulated customer response processing"
    
  - stage_number: 6
    name: "RETRIEVE"
    mode: "deterministic"
    description: "Search knowledge base and retrieve data"
    ai_integration: false
    abilities:
      - knowledge_base_search (ATLAS)
    implementation: "Simulated KB search with static results"
    
  - stage_number: 7
    name: "DECIDE"
    mode: "non-deterministic"
    description: "Generate and evaluate solutions"
    ai_integration: true
    ai_calls: 1
    abilities:
      - solution_evaluation (COMMON - Gemini AI)
      - escalation_decision (ATLAS)
    implementation: "AI solution generation and evaluation in single call"
    note: "Combines solution generation and evaluation for efficiency"
    
  - stage_number: 8
    name: "UPDATE"
    mode: "deterministic"
    description: "Update ticket status"
    ai_integration: false
    abilities:
      - update_ticket (ATLAS)
      - close_ticket (ATLAS)
    implementation: "Simulated ticket management system"
    
  - stage_number: 9
    name: "CREATE"
    mode: "deterministic"
    description: "Generate customer response"
    ai_integration: true
    ai_calls: 1
    abilities:
      - response_generation (COMMON - Gemini AI)
    implementation: "AI-powered customer response generation"
    
  - stage_number: 10
    name: "DO"
    mode: "deterministic"
    description: "Execute actions and notifications"
    ai_integration: false
    abilities:
      - execute_api_calls (ATLAS)
      - trigger_notifications (ATLAS)
    implementation: "Simulated external system integrations"
    
  - stage_number: 11
    name: "COMPLETE"
    mode: "deterministic"
    description: "Output final payload"
    ai_integration: false
    abilities:
      - output_payload
    implementation: "Final state compilation and logging"

# AI Integration Summary
ai_integration:
  total_ai_calls: 3
  gemini_model: "gemini-1.5-flash"
  ai_stages:
    - stage: 2
      purpose: "Query analysis and intent classification"
      fallback: "Static classification logic"
    - stage: 7
      purpose: "Solution generation and evaluation"
      fallback: "Intent-based solution templates"
    - stage: 9
      purpose: "Customer response generation"
      fallback: "Generic professional response"
  
  error_handling:
    - JSON parsing with cleanup
    - Multiple fallback strategies
    - Field validation and defaults
    - Graceful degradation

# State Variables
state_schema:
  # Input fields
  customer_name: "str"
  email: "str"
  query: "str" 
  priority: "str"
  ticket_id: "str"
  
  # Stage 2 outputs
  parsed_intent: "Optional[str]"
  entities: "Optional[Dict]"
  sentiment: "Optional[str]"
  urgency: "Optional[str]"
  complexity: "Optional[str]"
  customer_emotion: "Optional[str]"
  
  # Stage 3 outputs
  normalized_fields: "Optional[Dict]"
  enriched_data: "Optional[Dict]"
  flags_calculations: "Optional[Dict]"
  
  # Stage 4-5 outputs
  clarification_needed: "Optional[bool]"
  clarification_question: "Optional[str]"
  customer_response: "Optional[str]"
  
  # Stage 6 outputs
  knowledge_base_results: "Optional[List[Dict]]"
  relevant_data: "Optional[Dict]"
  
  # Stage 7 outputs
  solutions: "Optional[List[Dict]]"
  chosen_solution: "Optional[Dict]"
  escalation_required: "Optional[bool]"
  
  # Stage 8-9 outputs
  ticket_status: "Optional[str]"
  generated_response: "Optional[str]"
  
  # Stage 10 outputs
  executed_actions: "Optional[List[str]]"
  notifications_sent: "Optional[List[str]]"
  
  # Stage 11 outputs
  final_status: "Optional[str]"
  processing_time: "Optional[str]"
  
  # Metadata
  stage_history: "List[str]"
  current_stage: "str"
  timestamp: "str"

# Workflow Rules
workflow_rules:
  - rule: "Sequential Execution"
    description: "All stages execute in 1-11 order"
    implementation: "Linear StateGraph edges"
    
  - rule: "State Persistence"  
    description: "WorkflowState persists across all stages"
    implementation: "LangGraph StateGraph with TypedDict"
    
  - rule: "AI Efficiency"
    description: "Minimize AI calls while maximizing value"
    implementation: "3 strategic Gemini calls with robust fallbacks"
    
  - rule: "Error Resilience"
    description: "Workflow continues even if AI calls fail"
    implementation: "Try-catch blocks with fallback logic"
    
  - rule: "Audit Trail"
    description: "Complete execution logging"
    implementation: "stage_history tracking and detailed logs"

# Output Schema
output_schema:
  type: "object"
  properties:
    ticket_id:
      type: "string"
    status:
      type: "string"
      enum: ["resolved", "escalated", "in_progress", "pending"]
    customer:
      type: "object"
      properties:
        name:
          type: "string"
        email:
          type: "string"
    analysis:
      type: "object"
      properties:
        intent:
          type: "string"
        sentiment:
          type: "string"
        urgency:
          type: "string"
        complexity:
          type: "string"
    solution:
      type: "object"
      properties:
        action:
          type: "string"
        description:
          type: "string"
        confidence_score:
          type: "integer"
          minimum: 0
          maximum: 100
    response_sent:
      type: "boolean"
    escalated:
      type: "boolean"
    processing_time:
      type: "string"
    actions_taken:
      type: "array"
      items:
        type: "string"
    notifications_sent:
      type: "array"
      items:
        type: "string"
    stages_completed:
      type: "array"
      items:
        type: "string"

# Environment Requirements
environment:
  required_variables:
    - GEMINI_API_KEY
  optional_variables:
    - LOG_LEVEL
  
  dependencies:
    - "langgraph>=0.2.0"
    - "google-generativeai>=0.7.0" 
    - "python-dotenv>=1.0.0"

# Demo Configuration
demo:
  sample_input:
    customer_name: "John Smith"
    email: ""
    query: "When will my order come? My order id is #456 and my last name is Smith"
    priority: "medium"
    ticket_id: "T001"
  
  expected_workflow:
    - clarification_needed: true
    - intent_classification: "order_status"
    - solution_generation: "AI-powered"
    - escalation: false
    - response_type: "AI-generated"
